name: CI/CD Pipeline for C# MVC Project

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: [self-hosted, Linux, ARM64]
    env:
      SANITIZED_GITHUB_REF: ${{ github.ref.name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Print working directory
        run: pwd

      - name: List files in project root
        run: ls -la

      - name: Sanitize GitHub ref name
        run: echo "SANITIZED_GITHUB_REF=${SANITIZED_GITHUB_REF//[\/:]/-}" >> $GITHUB_ENV

      - name: Build and cache Docker image
        run: |
          docker build \
            -t niloyan/dierentuin:${{ env.SANITIZED_GITHUB_REF }} \
            --target build --build-arg "INCLUDE_UNITTESTING=true" \
            -f ./Dierentuin/Dockerfile .

  unit-testing:
    runs-on: [self-hosted, Linux, ARM64]
    needs: build
    env:
      SANITIZED_GITHUB_REF: ${{ needs.build.outputs.SANITIZED_GITHUB_REF }}
    steps:
      - name: Run dotnet tests inside Docker container
        run: docker run --entrypoint "" niloyan/dierentuin:${{ env.SANITIZED_GITHUB_REF }} dotnet test

  prepare-release:
    runs-on: [self-hosted, Linux, ARM64]
    needs: unit-testing
    env:
      SANITIZED_GITHUB_REF: ${{ needs.build.outputs.SANITIZED_GITHUB_REF }}
    steps:
      - name: Docker build as final
        run: |
          docker build \
            -t niloyan/dierentuin:${{ env.SANITIZED_GITHUB_REF }} \
            --target final --build-arg "INCLUDE_UNITTESTING=true" \
            -f ./Dierentuin/Dockerfile .

  push-docker-hub:
    runs-on: [self-hosted, Linux, ARM64]
    needs: prepare-release
    env:
      SANITIZED_GITHUB_REF: ${{ needs.build.outputs.SANITIZED_GITHUB_REF }}
    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push niloyan/dierentuin:${{ env.SANITIZED_GITHUB_REF }}

  deploy:
    runs-on: [self-hosted, Linux, ARM64]
    needs: push-docker-hub
    steps:
      - name: Setup Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" > ~/.kube/config

      - name: Apply deploy.yml
        run: kubectl apply -f k8s/deploy.yml

      - name: Kube Rollout (restart)
        run: kubectl rollout restart deployment/group01

  setup-monitoring:
    runs-on: [self-hosted, Linux, ARM64]
    needs: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose -y

      - name: Build and run services
        run: docker-compose up -d --build

      - name: Wait for services to be up
        run: |
          echo "Waiting for Grafana and Prometheus to be up..."
          sleep 30

      - name: Display Grafana and Prometheus URLs
        run: |
          echo "Grafana is available at http://localhost:3000 (admin/admin)"
          echo "Prometheus is available at http://localhost:9090"
