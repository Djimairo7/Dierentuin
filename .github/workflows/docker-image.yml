name: Create, test and Publish Dotnet Release

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

jobs:
  build:
    runs-on: [self-hosted, Linux, ARM64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build and cache Docker image
        run: |
          docker build --no-cache \
            -t niloyan/dierentuin:${{ github.ref_name }} \
            --target build --build-arg "INCLUDE_UNITTESTING=true" \
            -f ./Dierentuin/Dockerfile .

  unittesting:
    runs-on: [self-hosted, Linux, ARM64]
    needs: build
    steps:
      - name: Run dotnet tests inside Docker container
        run: docker run --entrypoint "" niloyan/dierentuin:${{ github.ref_name }} dotnet test

  prepare-release:
    runs-on: [self-hosted, Linux, ARM64]
    needs: unittesting
    steps:
      - name: Docker build as final
        run: |
          echo "var: "${{ needs.build.outputs.docker_tag_version }} && \
          docker build \
            -t niloyan/dierentuin:${{ github.ref_name }} \
            --target final --build-arg "INCLUDE_UNITTESTING=true" \
            -f ./Dierentuin/Dockerfile .
            
  infrastructure-testing:
      runs-on: [self-hosted, Linux, ARM64]
      needs: prepare-release
      env:
        GOSS_SLEEP: 2
        GOSS_FILE: ./goss.yaml 
      #Goss path
      
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Run Goss tests inside Docker container
          run: | # Combine all goss files 
            dgoss run ${{ secrets.DOCKER_USERNAME }}/dierentuin:${{ github.ref_name }}

  push-docker-hub:
    runs-on: [self-hosted, Linux, ARM64]
    needs: prepare-release
    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Push Docker image
        run: |
          docker push niloyan/dierentuin:${{ github.ref_name }}
