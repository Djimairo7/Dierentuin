name: Create, test and Publish Dotnet Release

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

jobs:
  build:
    runs-on: [self-hosted, Linux, ARM64]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Build and cache Docker image
      run: |
        docker build --no-cache \
          -t Paskie0/Dierentuin:${{ github.ref_name }} \
          --target build --build-arg "INCLUDE_UNITTESTING=true" \
          -f ./DierenTuin/Dockerfile .

  unittesting:
    runs-on: [self-hosted, Linux, ARM64]
    needs: build
    steps:
      - name: Run dotnet tests inside Docker container
        run: docker run --entrypoint "" Paksie0/dierentuin:${{ github.ref_name }} dotnet test

  prepare-release:
    runs-on: [self-hosted, Linux, ARM64]
    needs: unittesting
    steps:
      - name: Docker build as final
        # Unittesting is still on true, so we can use build cache. Goss checks that Unittesting is not in release version!
        run: |
          echo "var: "${{ needs.build.outputs.docker_tag_version }} && \
          docker build \
            -t Paskie0/dierentuin:${{ github.ref_name }} \
            --target final --build-arg "INCLUDE_UNITTESTING=true" \
            -f ./DierenTuin/Dockerfile .
        
  infrastructure-testing:
    runs-on: [self-hosted, Linux, ARM64]
    needs: prepare-release
    env:
      GOSS_SLEEP: 2
      GOSS_FILE: .goss/goss.yaml # Goss path
    steps:
    
      # Incomplete
    
      - name: Run Goss tests inside Docker container
        run: |
          # Combine all goss files
          dgoss run Paskie0/dierentuin:${{ github.ref_name }}

  push-docker-hub:
    runs-on: [self-hosted, Linux, ARM64]
    needs: infrastructure-testing
    if: github.ref_name == 'master' || github.ref_name == 'production'
    steps:
    
      # Incomplete

      - name: Push Docker image
        run: |
          docker push Paskie0/dierentuin:latest
