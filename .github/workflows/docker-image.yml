name: CI/CD Pipeline for C# MVC Project

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

jobs:
  build:
    runs-on: [self-hosted, Linux, ARM64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache NuGet packages
        id: cache-nuget
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Print working directory
        run: pwd

      - name: List files in project root
        run: ls -la

      - name: Restore NuGet packages
        run: dotnet restore Dierentuin/Dierentuin.csproj

      - name: Build and cache Docker image
        run: |
          docker build \
            -t niloyan/dierentuin:${{ github.ref_name }} \
            --target build --build-arg "INCLUDE_UNITTESTING=true" \
            -f ./Dierentuin/Dockerfile .

      - name: Save NuGet cache
        if: steps.cache-nuget.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}

  unit-testing:
    runs-on: [self-hosted, Linux, ARM64]
    needs: build
    steps:
      - name: Run dotnet tests inside Docker container
        run: docker run --entrypoint "" niloyan/dierentuin:${{ github.ref_name }} dotnet test

  prepare-release:
    runs-on: [self-hosted, Linux, ARM64]
    needs: unit-testing
    steps:
      - name: Docker build as final
        run: |
          docker build \
            -t niloyan/dierentuin:${{ github.ref_name }} \
            --target final --build-arg "INCLUDE_UNITTESTING=true" \
            -f ./Dierentuin/Dockerfile .

  push-docker-hub:
    runs-on: [self-hosted, Linux, ARM64]
    needs: prepare-release
    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push niloyan/dierentuin:${{ github.ref_name }}

  deploy:
    runs-on: [self-hosted, Linux, ARM64]
    needs: push-docker-hub
    steps:
      - name: Setup Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" > ~/.kube/config

      - name: Debug Kubeconfig
        run: |
          echo "Kubeconfig content:"
          cat ~/.kube/config
          echo "Kubeconfig context:"
          kubectl config get-contexts
        shell: bash

      - name: Test Kubernetes Connection
        run: |
          echo "Testing kubectl connection:"
          kubectl cluster-info
        shell: bash

      - name: Apply deploy.yml
        run: kubectl apply -f k8s/deploy.yml

      - name: Kube Rollout (restart)
        run: kubectl rollout restart deployment/group01
