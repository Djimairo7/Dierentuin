name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: [self-hosted, Linux, ARM64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Print working directory
        run: pwd

      - name: List files in project root
        run: ls -la

      - name: Build and cache Docker image
        run: |
          docker build \
            -t niloyan/dierentuin:${{ github.sha }} \
            --target build \
            -f ./Dierentuin/Dockerfile .

  unit-testing:
    runs-on: [self-hosted, Linux, ARM64]
    needs: build
    steps:
      - name: Run dotnet tests inside Docker container
        working-directory: TestProject1
        run: docker run --entrypoint "" niloyan/dierentuin:${{ github.sha }} dotnet test --logger:trx

  code-quality:
    runs-on: [self-hosted, Linux, ARM64]
    needs: unit-testing
    steps:
      - name: Run dotnet format
        run: docker run --entrypoint "" niloyan/dierentuin:${{ github.sha }} dotnet format ./Dierentuin.csproj -v d

  prepare-release:
    runs-on: [self-hosted, Linux, ARM64]
    needs: code-quality
    steps:
      - name: Docker build as final
        run: |
          docker build \
            -t niloyan/dierentuin:${{ github.sha }} \
            --target final \
            -f ./Dierentuin/Dockerfile .

  push-docker-hub:
    runs-on: [self-hosted, Linux, ARM64]
    needs: prepare-release
    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push niloyan/dierentuin:${{ github.sha }}

  deploy:
    runs-on: [self-hosted, Linux, ARM64]
    needs: push-docker-hub
    steps:
      - name: Setup Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" > ~/.kube/config

      - name: Apply deploy.yml
        run: kubectl apply -f k8s/deploy.yml

      - name: Update deployment image
        run: kubectl set image deployment/group01 group01=niloyan/dierentuin:${{ github.sha }} -n group01

      - name: Kube Rollout (restart)
        run: kubectl rollout restart deployment/group01

  monitoring:
    runs-on: [self-hosted, Linux, ARM64]
    needs: deploy
    steps:
      - name: Deploy Prometheus
        run: kubectl apply -f k8s/prometheus.yml

      - name: Deploy Grafana
        run: kubectl apply -f k8s/grafana.yml

  health-check:
    runs-on: [self-hosted, Linux, ARM64]
    needs: monitoring
    steps:
      - name: Wait for endpoint to be ready
        run: sleep 30

      - name: Health check
        run: |
          URL="http://group01.web.dops.tech/health"
          MAX_RETRIES=5
          RETRY_COUNT=0
          STATUS_CODE=0

          until [ "$STATUS_CODE" -eq 200 ] || [ "$RETRY_COUNT" -ge "$MAX_RETRIES" ]; do
            STATUS_CODE=$(curl -L --write-out %{http_code} --silent --output /dev/null "$URL")
            echo "Attempt $((RETRY_COUNT+1)): Status Code: $STATUS_CODE"
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ "$STATUS_CODE" -ne 200 ]; then
              echo "Health check failed with status code $STATUS_CODE, retrying..."
              sleep 5  # Wait for 5 seconds before retrying
            fi
          done

          if [ "$STATUS_CODE" -ne 200 ]; then
            echo "Health check failed after $MAX_RETRIES attempts with status code $STATUS_CODE"
            exit 1
          else
            echo "Health check passed"
          fi
